tune_in_my_project.txt
Last Update of this document:
09/05/2014

Main language for code:
Python 3 in English

Main environment:
Windows xp and later

Portability:
UniX and MacX should be able to display the app correctly.
the main code should also work with Python 2.76+ but this may change. When I write this, Python 2 is still used a lot but it may change in the future.

write idiomatic code!(pythonic):
https://www.jeffknupp.com/writing-idiomatic-python-ebook/
good
if a:
bad
if a==True:


naming:
check the file in conventions to learn more

docstrings:
everything you can !(See file in Conventions for details.)

strings:
In Python you can use " " or ' ' or """ """ for strings
* Use 'for python keywords'
* Use u"for self decided strings and double quotes inside with antislash \"     "
the u prefix forces unicode in Python<3.0
* Use _(u"for locale strings, these are shown to the end user")
* Use """ for Docstrings."""
* Use the r prefix if you NEED raw strings (\n will not be transformed)


indent:
use 4 spaces ! Tip: If you are used to press TAB to indent then go into your text editor settings and enable the "automatically replace TAB by 4 spaces" There should be an option like that(if not throw away your text editor).

Newline:
\r\n or \n but who cares ? I think this can be interesting to reduce a little bit the the size of the project.
I think that files on GitHub are normalized to use \n.

GUI:
tkinter

Format to organize data in files:
-JSON(For now it s still a custom format I created but I m working on it.)

File encoding:
UTF-8(without BOM), no exception, period. Have a look at
http://www.utf8everywhere.org/

Documentation format:
raw txt for text
HTML for anything that requires more than just text or that should serve the end-user
jpg for images
mp3, flac for sound
mp4 ,[insert other open format for videos here] for videos
try to not use other formats, HTML is very easy and with the app it s easier. If you can't then you should make a folder with text files and images and later do html with it.

What should I do?
Check the To_do.html file in Documentation to find interesting and exciting tasks.

Builds:
We need an easy freezing tool : freeze("WebSpree.py") --> WebSpree.exe
coming

Distributed Version control:
GitHub !

Bug-tracking:
GitHub !

Test driven developpement:
We need to stabilize the product first
coming